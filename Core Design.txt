COLLISION HANDLING DESIGN:
	to get a big picture on how the game will execute, i am setting up a frame-order design
	this will be referred to when checking what will be called when, what it does, where it occurs
	sync implies the task will be waited on, async imples the task will not be waited on

	-NEW ADDITIONS: ICharacter and Character (will be added)
		inherits from PhysicsComponent
		(design me here)

	CORE (main thread)-
		if running,
			process input 
			tick physics
			process events
			render all objects to screen
			render UI
			refresh screen
	
	Input function-
		-process all user input, crunch into simple format (such as an array or struct)
		-get an array of characters, find whichever is being controlled by the user
		-run input callback for character, giving it input data

	frame order for physics:
		-move all objects (calling tick)
			tick moves object as it would normally
			IF NONSTATIC : calls movementMode tick function (if custom, calls custom movement callback)
		-test collisions between all objects in an area (using octtrees), generates collision results (whether or not A collided with B between each object)
		-call resolvecollisions for all objects
			resolves collision as it would normally
				resolves collider and collidee in one go (if collidee need be resolved)
			IF NONSTATIC : checks movementMode, calls corresponding movement correction (if custom, calls custom movement correction callback)
		-finalizes move (updates movementMode depending on state of the player)

	movementMode/customMovementMode design:
		ignored if the object is static
		each movementMode has a corresponding movementMode tick callback and check callback
			custom movement modes can be registered using instance of IWorld class. once registered, any nonstatic object can use that movement mode
		walking:
			check if walking state should be placed on object each tick by tracing a ray from the lowest outer points of the mesh


	raytracing design:
		-raytracing is a necessary part of the game, it allows testing collisions through a line segment
		STRUCTS:	
			RaytraceResult
				IPhysicsComponent* firstCollision - first object the line hit
				float collisionDist - distance from start which the ray hit the object
				Ray ray - a ray representing point and direction of the trace
				float rayDist - the total distance the ray would have traced
				bool didHit - whether or not the ray hit an object over rayDist

			RaytraceParams
				vector ignoreList - list of objects to be ignored by this raytrace
				RaytraceFunc func - callback to check if hitobject should be ignored

